#!/usr/bin/env python2

import argparse
import json
import os
import urllib

def dump(netdata_url):
    output_dir = '/tmp/netdata-utils'
    base_url = netdata_url + '/api/v1'
    charts_url = base_url + '/charts'

    try:
        if not os.access(output_dir, os.W_OK):
            os.makedirs(output_dir)
    except OSError as e:
        print(e)
        return 1

    try:
        charts = json.load(urllib.urlopen(charts_url))

        hostname = charts['hostname']
        host_dir = os.path.join(output_dir, hostname)
        try:
            if not os.access(host_dir, os.W_OK):
                os.makedirs(host_dir)
        except OSError as e:
            raise e

        host_info = {}
        for key in charts.keys():
            if key != 'charts':
                host_info[key] = charts[key]
        host_info_file = os.path.join(host_dir, 'host.json')
        with open(host_info_file, 'w') as fp:
            json.dump(host_info, fp)

        for chart_id in charts['charts']:
            print("Retrieving {0} from {1}".format(chart_id, netdata_url))
            data_url = "{0}/data?chart={1}&format=json&options=seconds,jsonwrap".\
                format(base_url, chart_id)
            chart_data = json.load(urllib.urlopen(data_url))
            chart_file = os.path.join(host_dir, chart_id)
            with open(chart_file , 'w') as fp:
                json.dump(chart_data, fp)

    except IOError as e:
        print(e)
        return 1

    return 0

parser = argparse.ArgumentParser(description='A set of netdata utilities')
parser.add_argument('action', choices=['dump'],
                    help='List of possible actions')
parser.add_argument('urls', nargs='+',
                    help='netdata API URL e.g., http://localhost:19999')
args = parser.parse_args()

rc = 0
if args.action == 'dump':
    for url in args.urls:
        rc = dump(url)

exit(rc)
