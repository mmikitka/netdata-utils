#!/usr/bin/env python2

import argparse
import json
import os
import urllib

def dump(args):
    output_dir = '/tmp/netdata-utils'
    base_url = netdata_url + '/api/v1'
    charts_url = base_url + '/charts'

    try:
        if not os.access(output_dir, os.W_OK):
            os.makedirs(output_dir)
    except OSError as e:
        print(e)
        return 1

    try:
        charts = json.load(urllib.urlopen(charts_url))

        hostname = charts['hostname']
        host_dir = os.path.join(output_dir, hostname)
        try:
            if not os.access(host_dir, os.W_OK):
                os.makedirs(host_dir)
        except OSError as e:
            raise e

        host_info = {}
        for key in charts.keys():
            if key != 'charts':
                host_info[key] = charts[key]
        host_info_file = os.path.join(host_dir, 'host.json')
        with open(host_info_file, 'w') as fp:
            json.dump(host_info, fp)

        for chart_id in charts['charts']:
            print("Retrieving {0} from {1}".format(chart_id, netdata_url))
            data_url = "{0}/data?chart={1}&format=json&options=seconds,jsonwrap".\
                format(base_url, chart_id)
            chart_data = json.load(urllib.urlopen(data_url))
            chart_file = os.path.join(host_dir, chart_id)
            with open(chart_file , 'w') as fp:
                json.dump(chart_data, fp)

    except IOError as e:
        print(e)
        return 1

    return 0

def _print_metrics(path):
    with open(path, 'r') as fp:
        data = json.load(fp)
        labels = sorted(data['result']['labels'])
        for label in labels:
            print("\t\t{0}".format(label))

def metrics(args):
    for base_path in sorted(args.paths):
        print(base_path)
        for item in sorted(os.listdir(base_path)):
            if item == 'host.json':
                continue

            item_path = os.path.join(base_path, item)
            if os.path.isfile(item_path):
                print("\t{0}".format(item_path))
                _print_metrics(item_path)

    return 0

parser = argparse.ArgumentParser(description='A set of netdata utilities')
subparsers = parser.add_subparsers(help='Sub-command help')

# Sub-command: dump
dump_parser = subparsers.add_parser('dump', description='Dump all data from a netdata host')
dump_parser.add_argument('urls', nargs='+',
                         help='netdata API URL e.g., http://localhost:19999')
dump_parser.set_defaults(func=dump)

# Sub-command: metrics
metrics_parser = subparsers.add_parser('metrics',
                                       description='All metrics in a data collection')
metrics_parser.add_argument('paths', nargs='+',
                         help='Directory containing results from the dump sub-command')
metrics_parser.set_defaults(func=metrics)

args = parser.parse_args()
args.func(args)

exit(0)
