#!/usr/bin/env python2

import argparse
from datetime import datetime
import json
import os
import re
import urllib

def dump(args):
    for url in args.urls:
        _dump_url(url, args)

def _dump_url(netdata_url, args):
    base_url = netdata_url + '/api/v1'
    charts_url = base_url + '/charts'

    try:
        if not os.access(args.output_dir, os.W_OK):
            os.makedirs(args.output_dir)
    except OSError as e:
        print(e)
        return 1

    try:
        charts = json.load(urllib.urlopen(charts_url))

        hostname = charts['hostname']
        host_dir = os.path.join(args.output_dir, hostname)
        try:
            if not os.access(host_dir, os.W_OK):
                os.makedirs(host_dir)
        except OSError as e:
            raise e

        charts_info_file = os.path.join(host_dir, 'charts.json')
        with open(charts_info_file, 'w') as fp:
            json.dump(charts, fp)

        chart_pat = re.compile(args.chart) if args.chart else None
        for chart_id in charts['charts']:
            if (not chart_pat
                    or chart_pat.match(chart_id)):
                print("Retrieving {0} from {1}".format(chart_id, netdata_url))

                data_url = "{0}/data?chart={1}".format(base_url, chart_id)
                if args.after:
                    data_url += "&after={0}".format(args.after)
                if args.before:
                    data_url += "&before={0}".format(args.before)
                data_url += "&format=json&options=seconds,jsonwrap"

                chart_data = json.load(urllib.urlopen(data_url))
                chart_file = os.path.join(host_dir, chart_id)
                with open(chart_file , 'w') as fp:
                    if args.output_format == 'json':
                        json.dump(chart_data, fp)
                    elif args.output_format == 'csv':
                        fp.write(",".join(chart_data['result']['labels']) + "\n")
                        for row in chart_data['result']['data']:
                            fp.write(",".join(str(x) for x in row) + "\n")

    except IOError as e:
        print(e)
        return 1

    return 0

def show_charts(args):
    for url in args.urls:
        _show_charts_url(url, args)

def _show_charts_url(netdata_url, args):
    base_url = netdata_url + '/api/v1'
    charts_url = base_url + '/charts'
    try:
        charts = json.load(urllib.urlopen(charts_url))
        for chart in charts['charts']:
            chart_data = charts['charts'][chart]
            print(chart)
            for key in ['first_entry', 'last_entry']:
                print("  {0} = {1}".format(
                    key,
                    datetime.fromtimestamp(chart_data[key])))
            for key in ['update_every', 'units']:
                print("  {0} = {1}".format(key, chart_data[key]))
            print("")

    except IOError as e:
        print(e)
        return 1

    return 0

parser = argparse.ArgumentParser(description='A set of netdata utilities')
subparsers = parser.add_subparsers(help='Sub-command help')

# Sub-command: dump
dump_parser = subparsers.add_parser('dump', description='Dump all data from a netdata host')
dump_parser.add_argument('-o', '--output-dir', default='dump',
                         help='output directory')
dump_parser.add_argument('-a', '--after',
                         help='Absolute timestamp or a relative number \
                            in seconds specifying the starting point of \
                            the dataset')
dump_parser.add_argument('-b', '--before',
                         help='Absolute timestamp or a relative number \
                            in seconds specifying the ending point of \
                            the dataset')
dump_parser.add_argument('-c', '--chart',
                         help='Chart ID regular expression')
dump_parser.add_argument('-f', '--output-format',
                         choices=['json', 'csv'],
                         default='json',
                         help='Data output format')
dump_parser.add_argument('urls', nargs='+',
                         help='netdata API URL e.g., http://localhost:19999')
dump_parser.set_defaults(func=dump)

# Sub-command: show
show_parser = subparsers.add_parser('show')
show_parser_sub = show_parser.add_subparsers(help='Sub-command help')

# Sub-command: show charts
show_charts_parser = show_parser_sub.add_parser(
    'charts',
    description='Show chart metadata')
show_charts_parser.add_argument('urls', nargs='+',
                                help='netdata API URL e.g., http://localhost:19999')
show_charts_parser.set_defaults(func=show_charts)

args = parser.parse_args()
args.func(args)

exit(0)
